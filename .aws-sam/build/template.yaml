Transform: AWS::Serverless-2016-10-31
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub:
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /items/:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetItemsFunction.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutItemsFunction.Arn}/invocations
              responses: {}
          /items/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetItemFunction.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteItemFunction.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  Database:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  GetItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetItemsFunction
      CodeUri: GetItemsFunction
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiGETitems:
          Type: Api
          Properties:
            Path: /items/
            Method: GET
            RestApiId:
              Ref: Api
      Environment:
        Variables:
          DATABASE_TABLE_NAME:
            Ref: Database
          DATABASE_TABLE_ARN:
            Fn::GetAtt:
            - Database
            - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Database
    Metadata:
      SamResourceId: GetItemsFunction
  GetItemsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetItemsFunction}
  Cloud9Instance:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      ImageId: amazonlinux-2023-x86_64
      InstanceType: t2.micro
  PutItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: PutItemsFunction
      CodeUri: PutItemsFunction
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiPUTitems:
          Type: Api
          Properties:
            Path: /items/
            Method: PUT
            RestApiId:
              Ref: Api
      Environment:
        Variables:
          DATABASE_TABLE_NAME:
            Ref: Database
          DATABASE_TABLE_ARN:
            Fn::GetAtt:
            - Database
            - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Database
    Metadata:
      SamResourceId: PutItemsFunction
  PutItemsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${PutItemsFunction}
  GetItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetItemFunction
      CodeUri: GetItemFunction
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiGETitemsid:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: GET
            RestApiId:
              Ref: Api
      Environment:
        Variables:
          DATABASE_TABLE_NAME:
            Ref: Database
          DATABASE_TABLE_ARN:
            Fn::GetAtt:
            - Database
            - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Database
    Metadata:
      SamResourceId: GetItemFunction
  GetItemFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetItemFunction}
  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: DeleteItemFunction
      CodeUri: DeleteItemFunction
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiDELETEitemsid:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: DELETE
            RestApiId:
              Ref: Api
      Environment:
        Variables:
          DATABASE_TABLE_NAME:
            Ref: Database
          DATABASE_TABLE_ARN:
            Fn::GetAtt:
            - Database
            - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Database
    Metadata:
      SamResourceId: DeleteItemFunction
  DeleteItemFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${DeleteItemFunction}
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: API COMPUTE
      Members:
      - GetItemsFunction
      - GetItemFunction
      - PutItemsFunction
      - DeleteItemFunction
